# coding: utf-8

"""
    Speech Services API version 3.2

    Speech Services API version 3.2.  # noqa: E501

    OpenAPI spec version: 3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ModelCopyAuthorization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_resource_region': 'str',
        'target_resource_id': 'str',
        'target_resource_endpoint': 'str',
        'source_resource_id': 'str',
        'expiration_date_time': 'datetime',
        'id': 'str'
    }

    attribute_map = {
        'target_resource_region': 'targetResourceRegion',
        'target_resource_id': 'targetResourceId',
        'target_resource_endpoint': 'targetResourceEndpoint',
        'source_resource_id': 'sourceResourceId',
        'expiration_date_time': 'expirationDateTime',
        'id': 'id'
    }

    def __init__(self, target_resource_region=None, target_resource_id=None, target_resource_endpoint=None, source_resource_id=None, expiration_date_time=None, id=None, _configuration=None):  # noqa: E501
        """ModelCopyAuthorization - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._target_resource_region = None
        self._target_resource_id = None
        self._target_resource_endpoint = None
        self._source_resource_id = None
        self._expiration_date_time = None
        self._id = None
        self.discriminator = None

        self.target_resource_region = target_resource_region
        self.target_resource_id = target_resource_id
        self.target_resource_endpoint = target_resource_endpoint
        self.source_resource_id = source_resource_id
        self.expiration_date_time = expiration_date_time
        self.id = id

    @property
    def target_resource_region(self):
        """Gets the target_resource_region of this ModelCopyAuthorization.  # noqa: E501

        The region (aka location) of the target speech resource (e.g., westus2).  # noqa: E501

        :return: The target_resource_region of this ModelCopyAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._target_resource_region

    @target_resource_region.setter
    def target_resource_region(self, target_resource_region):
        """Sets the target_resource_region of this ModelCopyAuthorization.

        The region (aka location) of the target speech resource (e.g., westus2).  # noqa: E501

        :param target_resource_region: The target_resource_region of this ModelCopyAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and target_resource_region is None:
            raise ValueError("Invalid value for `target_resource_region`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target_resource_region is not None and len(target_resource_region) < 1):
            raise ValueError("Invalid value for `target_resource_region`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_resource_region = target_resource_region

    @property
    def target_resource_id(self):
        """Gets the target_resource_id of this ModelCopyAuthorization.  # noqa: E501

        The Azure Resource ID of the target speech resource.  # noqa: E501

        :return: The target_resource_id of this ModelCopyAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._target_resource_id

    @target_resource_id.setter
    def target_resource_id(self, target_resource_id):
        """Sets the target_resource_id of this ModelCopyAuthorization.

        The Azure Resource ID of the target speech resource.  # noqa: E501

        :param target_resource_id: The target_resource_id of this ModelCopyAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and target_resource_id is None:
            raise ValueError("Invalid value for `target_resource_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target_resource_id is not None and len(target_resource_id) < 1):
            raise ValueError("Invalid value for `target_resource_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_resource_id = target_resource_id

    @property
    def target_resource_endpoint(self):
        """Gets the target_resource_endpoint of this ModelCopyAuthorization.  # noqa: E501

        The endpoint (base url) of the target resource (with custom domain name when it is used).  # noqa: E501

        :return: The target_resource_endpoint of this ModelCopyAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._target_resource_endpoint

    @target_resource_endpoint.setter
    def target_resource_endpoint(self, target_resource_endpoint):
        """Sets the target_resource_endpoint of this ModelCopyAuthorization.

        The endpoint (base url) of the target resource (with custom domain name when it is used).  # noqa: E501

        :param target_resource_endpoint: The target_resource_endpoint of this ModelCopyAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and target_resource_endpoint is None:
            raise ValueError("Invalid value for `target_resource_endpoint`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target_resource_endpoint is not None and len(target_resource_endpoint) < 1):
            raise ValueError("Invalid value for `target_resource_endpoint`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_resource_endpoint = target_resource_endpoint

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this ModelCopyAuthorization.  # noqa: E501

        The Azure Resource ID of the source speech resource.  # noqa: E501

        :return: The source_resource_id of this ModelCopyAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this ModelCopyAuthorization.

        The Azure Resource ID of the source speech resource.  # noqa: E501

        :param source_resource_id: The source_resource_id of this ModelCopyAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_resource_id is None:
            raise ValueError("Invalid value for `source_resource_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_resource_id is not None and len(source_resource_id) < 1):
            raise ValueError("Invalid value for `source_resource_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_resource_id = source_resource_id

    @property
    def expiration_date_time(self):
        """Gets the expiration_date_time of this ModelCopyAuthorization.  # noqa: E501

        The expiration date of this copy authorization.  # noqa: E501

        :return: The expiration_date_time of this ModelCopyAuthorization.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date_time

    @expiration_date_time.setter
    def expiration_date_time(self, expiration_date_time):
        """Sets the expiration_date_time of this ModelCopyAuthorization.

        The expiration date of this copy authorization.  # noqa: E501

        :param expiration_date_time: The expiration_date_time of this ModelCopyAuthorization.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and expiration_date_time is None:
            raise ValueError("Invalid value for `expiration_date_time`, must not be `None`")  # noqa: E501

        self._expiration_date_time = expiration_date_time

    @property
    def id(self):
        """Gets the id of this ModelCopyAuthorization.  # noqa: E501

        The ID of this copy authorization.  # noqa: E501

        :return: The id of this ModelCopyAuthorization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelCopyAuthorization.

        The ID of this copy authorization.  # noqa: E501

        :param id: The id of this ModelCopyAuthorization.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelCopyAuthorization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelCopyAuthorization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelCopyAuthorization):
            return True

        return self.to_dict() != other.to_dict()
